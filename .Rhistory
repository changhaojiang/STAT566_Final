## Check IV inequalities are obeyed
check.iv.ineqs(lipid)
source("http://www.stat.washington.edu/tsr/s566/labs/y0y1polytopenew-rgl-col.R")
q3 <- c(0.376, 0.111, 0.158, 0.355, 0.122, 0.050, 0.100, 0.728)
check.iv.ineqs(q3)
simp <- do.simplex(phi=30,theta=120,r=1000,main="Lipid Data") # Set up plot
## Set up interactive plot
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d( c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(lipid[1:4],simp,red="green")
do.polytope.rgl(lipid[1:4], red="green")
do.polytope(lipid[5:8],simp,red="purple")
do.polytope.rgl(lipid[5:8], red="purple")
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
do.polytope(q3,simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d( c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3,simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
#lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3,simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3,simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
#lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3,simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
#do.polytope(q3,simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3[1:4],simp)
do.polytope(q3[5:8],simp)
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3[5:8],simp)
simp <- do.simplex(phi=30,theta=120,r=1000,main="IV Data; 3D view")
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(q3[5:8],simp)
ace.bounds(q3)
flu <- c(0.07127430, 0.02159827, 0.73938085, 0.16774658,
0.05706522, 0.02105978, 0.63519022, 0.28668478)
flu[1:4]
sum(flu[1:4])
flu[5:8]
sum(flu[5:8])
simp <- do.simplex(phi=30,theta=120,r=1000,main="Flu Data") # Set up plot
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d( c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
## Check IV inequalities
check.iv.ineqs(flu)
## Control Arm Polytope
do.polytope(flu[1:4],simp,red="green")
do.polytope.rgl(flu[1:4], red="green")
## Treatment Arm Polytope
do.polytope(flu[5:8],simp,red="purple")
do.polytope.rgl(flu[5:8], red="purple")
## Combined Polytope
do.polytope(flu,simp)
do.polytope.rgl(flu)
### Bounds analysis
## Let's look at the bounds for the ACE of X on Y
ace.bnds.flu <- ace.bounds(flu)
ace.bnds.flu
simp <- do.simplex(phi=-90,theta=90,r=1000,main="IV Data; 2D view")
simp <- do.simplex(phi=-90,theta=90,r=1000,main="IV Data; 2D view")
do.polytope(q3,simp)
ace.bnds.lipid <- ace.bounds(lipid)
ace.bnds.lipid
do.ace.line(ace.bnds.lipid[1], simp) # lower bound
## Set up interactive plot
plot3d(c(1,0,0,1),c(0,1,0,0),c(0,0,1,0), ylab="%HU",xlab="%HE",zlab="%AR",par3d(FOV=1))
lines3d( c(1,0,0,1),c(0,1,0,0),c(0,0,1,0),col="red",lty=3)
do.polytope(lipid,simp)
source("https://www.stat.washington.edu/tsr/s566/labs/y0y1polytopenew.R")
#source("~/madrid/people/jamie/iv_minimal/y0y1polytope.R")
# The p's are stored in the order
# p(y0, x0 | z0), p(y0, x1 | z0), p(y1, x0 | z0), p(y1, x1 | z0),
# p(y0, x0 | z1), p(y0, x1 | z1), p(y1, x0 | z1), p(y1, x1 | z1)
#lipid data
lipid.counts <- c(158,0,14,0,52,23,12,78)
lipid.obs.freqs <- c(158/172,0,14/172,0,52/165,23/165,12/165,78/165)
lipid.obs.freqs[1:4]
sum(lipid.obs.freqs[1:4])
lipid.obs.freqs[5:8]
sum(lipid.obs.freqs[5:8])
## Check that observed distribution obeys IV inequalities
check.iv.ineqs(lipid.obs.freqs)
empirical.ace.bounds <- ace.bounds(lipid.obs.freqs)
######## BAYESIAN INFERENCE ################
## Specification of prior for p(x,y|z)
prior.z0 <- c(1,0,1,0)  # Dirichlet prior
# zeros because for Lipid data Z=0 => X=0
prior.z1 <- c(1,1,1,1)  # Dirichlet prior
# Alternative unit prior specification
#prior.z0 <- c(1/2,0,1/2,0)
#prior.z1 <- c(1/4,1/4,1/4,1/4)
##
post.z0 <- prior.z0 + lipid.counts[1:4]
post.z1 <- prior.z1 + lipid.counts[5:8]
num.sims <- 10000  # Number of posterior simulations for each arm
theta.sims.z0 <- t(replicate(num.sims, dirichlet(post.z0) ))
colnames(theta.sims.z0) <- c("X0,Y0|Z0","X1,Y0|Z0","X0,Y1|Z0","X1,Y1|Z0")
theta.sims.z0.lst <- lapply(apply(theta.sims.z0,1,"c",as.list),function(x) x[1:4] )
# list is constructed for convenience with mapply
theta.sims.z1 <- t(replicate(num.sims, dirichlet(post.z1) ))
colnames(theta.sims.z1) <- c("X0,Y0|Z1","X1,Y0|Z1","X0,Y1|Z1","X1,Y1|Z1")
theta.sims <- cbind(theta.sims.z0, theta.sims.z1)
summary(theta.sims)
## Remove sampled distributions that violate the IV inequalites:
all.ivs.ok <- rep(NA,num.sims)
for (i in 1:num.sims){
all.ivs.ok[i] <- check.iv.ineqs(theta.sims[i,],verbose=FALSE)
}
summary(all.ivs.ok)
#Bayesian analysis of IV inequalities:
mean(all.ivs.ok)  ## Posterior probability that the IV model holds
## given the (unrestricted) Dirichlet posterior
## that is implied by the (unrestricted) Dirichlet prior.
## This is 63%, which is greater than the prior probability 50%;
## this is because the IV inequalities are nearly violated by the
## empirical distribution.
posterior.theta.sims.iv <- theta.sims[all.ivs.ok,]
### posterior.theta.sims.iv contains simulations from the posterior
### distribution of p(x,y|z) under our model
n <- sum(all.ivs.ok)
n # number of sims remaining after removing those
# violating IV inequalities
ace.bnds.lipid <- rep(1,n*2)
dim(ace.bnds.lipid) <- c(n,2)
for(i in 1:n){
ace.bnds.lipid[i,] <- ace.bounds(posterior.theta.sims.iv[i,])
}
#### Plot upper and lower bounds
do.tri.plot(ace.bnds.lipid[1:n,],title.txt="Bounds on ACE for Lipid Data")
###### Posterior distributions on upper and lower ACE bounds
dens.ace.lower <- density(ace.bnds.lipid[,1])
dens.ace.upper <- density(ace.bnds.lipid[,2])
par(mfrow=c(1,1))
plot(dens.ace.upper,xlab="ACE(X -> Y)", main="Posteriors on bounds for ACE(X->Y) for Lipid Data",xlim=c(-1,1),lty=1,col="green",type="l")
points(dens.ace.lower,col="red",type="l")
abline(v= empirical.ace.bounds, lty=3,lwd=1.5,col="blue")
abline(h=0, lty=1,col="black")
### Seeing the polytopes resulting from different posterior samples
for(i in 1:100){
simp <- do.simplex(phi=30,theta=120,r=1.7,main=paste("Lipid Data Posterior Draw: ",i))
do.polytope(posterior.theta.sims.iv[i,],simp,verbose=TRUE)
do.ace.line(ace.bnds.lipid[i,1], simp) # lower bound
do.ace.line(ace.bnds.lipid[i,2], simp)
cat("Hit a key to see next plot:")
scan("", what = character(), nmax = 1, quiet = TRUE)}
knitr::opts_chunk$set(echo = TRUE)
install.packages("magick")
library(magick)
setwd("/Users/philjiang/Desktop")
image <- image_read("dag.jpg")
library(magick)
setwd("/Users/philjiang/Desktop")
image <- image_read("dag.png")
image_display(image)
library(magick)
setwd("/Users/philjiang/Desktop")
png(file = "dag.png", width = 800, height = 600)
install.packages("png")
install.packages("grid")
library(png)
library(grid)
img <- readPNG("/Users/philjiang/Desktop/dag.png")
img_raster <- rasterGrob(img)
grid.draw(img_raster)
img_raster
img_raster
img_raster
img_raster
library(png)
library(grid)
img <- readPNG("/Users/philjiang/Desktop/dag.png")
#img_raster <- rasterGrob(img)
#grid.draw(img_raster)
img
img
library(knitr)
library(tidyverse)
library(rigr)
library(dplyr)
library(gtsummary)
library(flextable)
library(ggplot2)
library(rlearner)
library(data.table)
library(randomForest)
library(sandwich)
library(car)
data_dir <- "~/Desktop"
data <- fread(file.path(data_dir, "Diabetes.csv"))
balanced_diabetes <- fread(file.path(data_dir,"diabetes_binary_5050split_health_indicators_BRFSS2015.csv"))
set.seed(1)
diabetes <- data
fit.forest= randomForest(Diabetes_binary ~ HvyAlcoholConsump + Smoker +
PhysActivity + Fruits + Veggies,
data = balanced_diabetes, na.action = na.roughfix)
importance(fit.forest)
w1 = importance(fit.forest)[1] / sum(importance(fit.forest))
w2 = importance(fit.forest)[2] / sum(importance(fit.forest))
w3 = importance(fit.forest)[3] / sum(importance(fit.forest))
w4 = importance(fit.forest)[4] / sum(importance(fit.forest))
w5 = importance(fit.forest)[5] / sum(importance(fit.forest))
diabetes$score = -diabetes$HvyAlcoholConsump * w1 - diabetes$Smoker * w2 +
diabetes$PhysActivity * w3 + diabetes$Fruits * w4 + diabetes$Veggies * w5
mean_score <- mean(diabetes$score)
diabetes$scoreCat <- ifelse(diabetes$score > mean_score, 1, 0)
importance(fit.forest)
knitr::kable(importance(fit.forest))
importance(fit.forest)
ran_table <- importance(fit.forest)
colnames(ran_table)
ran_table <- importance(fit.forest)
colnames(ran_table) <- "weighting"
ran_table <- importance(fit.forest)
colnames(ran_table) <- "weighting"
knitr::kable(results, digits = c(4, 4, 4, 4, 4), align = "c", caption = "Scoring weights for each covariate")
ran_table <- importance(fit.forest)
colnames(ran_table) <- "weighting"
knitr::kable(ran_table, digits = c(4, 4, 4, 4, 4), align = "c", caption = "Scoring weights for each covariate")
data$ageCat <- factor(data$Age, levels = 1:13,
labels = c("18-24", "25-29", "30-34", "35-39", "40-44",
"45-49", "50-54", "55-59", "60-64", "65-69",
"70-74", "75-79", ">=80") )
data$eduCat <- factor(data$Education, levels = 1:6, labels =
c("Never attended school or only kindergarten",
"Elementary", "Some high school",
"High school graduate",
"Some college or technical school",
"College graduate"))
data$incomeCat <- factor(data$Income, levels = 1:8,
labels = c("< $10,000", "[$10,000, $15,000)",
"[$15,000, $20,000)", "[$20,000, $25,000)",
"[$25,000, $35,000)", "[$35,000, $50,000)",
"[$50,000, $75,000)", ">= $75,000"))
data$diaCat <- factor(data$Diabetes_binary, levels = 0:1,
labels = c("Healthy", "Prediabetes or diabetes"))
data$scoreCat2 = ifelse(data$scoreCat == "> mean score", 1, 0)
data$scoreCat2 <- as.numeric(data$scoreCat2)
data$Diabetes_binary <- as.numeric(data$Diabetes_binary)
data$gender <- factor(data$Sex, levels = 0:1, labels = c("Female", "Male"))
tabl1 <- data %>% select(Diabetes_binary, Sex, ageCat, eduCat, incomeCat,
scoreCat, Smoker,PhysActivity, Fruits, Veggies,
HvyAlcoholConsump, HighBP, HighChol, BMI, Stroke,
HeartDiseaseorAttack, AnyHealthcare) %>%
tbl_summary(by = Diabetes_binary, label =
list(Diabetes_binary ~ "Diagnosis of diabetes",
Sex ~ "Gender", ageCat ~ "5-year age category", eduCat ~ "Education",
incomeCat ~ "Income", scoreCat ~ "Lifestyle composition score",
Smoker ~ "Have smoked at least 100 cigarettes lifetime",
PhysActivity ~ "Physical activity in past 30 days (not including job)",
Fruits ~ "Consume fruit >= 1 times per day",
Veggies ~ "Consume vegetables >= 1 times per day",
HvyAlcoholConsump ~ "Heavy drinkers", HighBP ~ "High blood pressure",
HighChol ~ "High cholesterol", Stroke ~ "Ever had a stroke",
HeartDiseaseorAttack ~ "Coronary heart disease or myocardial infarction",
AnyHealthcare ~ "Any health coverage"),
statistic = all_continuous() ~ "{mean}({sd})",
type = all_continuous() ~ 'continuous2',
missing = "no") %>% add_p()
plot_income <- ggplot(data,
aes(x=factor(incomeCat), fill = factor(diaCat))) +
geom_bar(position = "dodge", width = 0.8)+
scale_fill_manual(values = c("Healthy" = "lightblue",
"Prediabetes or diabetes" = "darkorange"))+
labs(x = "Income category", y = "Count", fill = "Diabetes status") +
facet_wrap(~scoreCat, ncol =1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Income of participants in different lifestyle score category and diabetes status")
plot_income
# plots on age categories
plot_age <- ggplot(data,
aes(x=factor(ageCat), fill = factor(diaCat))) +
geom_bar(position = "dodge", width = 0.8)+
scale_fill_manual(values = c("Healthy" = "lightblue",
"Prediabetes or diabetes" = "darkorange"))+
labs(x = "Age category", y = "Count", fill = "Diabetes status") +
facet_wrap(~scoreCat, ncol =1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("Age of participants in different lifestyle score category and diabetes status")
plot_age
# plot on gender
plot_gender <- ggplot(data,
aes(x=gender, fill = factor(diaCat))) +
geom_bar(position = "dodge", width = 0.8)+
scale_fill_manual(values = c("Healthy" = "lightblue",
"Prediabetes or diabetes" = "darkorange"))+
labs(x = "Gender", y = "Count", fill = "Diabetes status") +
facet_wrap(~scoreCat, ncol =1) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
ggtitle("Gender of participants in different lifestyle score category and diabetes status")
plot_gender
set.seed(1)
data$scoreCat <- ifelse(data$scoreCat == "> mean score",1,0)
rW  = cbind(data$Age,data$Sex,data$Income)
rW = as.matrix(rW)
rA = data$scoreCat
rY = data$Diabetes_binary
rlasso_fit = rlasso(rW, rA, rY,k_folds = 10)
rlasso_est = predict(rlasso_fit, rW)
plotdata <- data.frame(Income = data$Income,
Estimator =rlasso_est)
plotdata$Income_Group <- cut(plotdata$Income, breaks=c(0,2, 4,6, 8), labels=c("<15000","[15000,25000)","[25000,50000)", ">=50000"))
ggplot(plotdata, aes(x = Income_Group, y = Estimator, fill = Income_Group)) +
geom_boxplot() +
ggtitle("The result of R-learner(Income)") +
xlab("Income Group") +
ylab("Estimator") +
scale_fill_brewer(palette="Set1") +
theme_bw()
plotdata <- data.frame(Sex = data$Sex,
Estimator =rlasso_est)
plotdata$Gender_Group <- ifelse(plotdata$Sex==0,"Female","Male")
ggplot(plotdata, aes(x = Gender_Group, y = Estimator, fill = Gender_Group)) +
geom_boxplot() +
ggtitle("The result of R-learner(Gender)") +
xlab("Gender Group") +
ylab("Estimator") +
scale_fill_brewer(palette="Set2") +
theme_bw()
plotdata <- data.frame(Age = data$Age,
Estimator =rlasso_est)
plotdata$Age = as.factor(plotdata$Age)
age_labels <- c("18-24","25-29","30-34","35-39","40-44","45-49","51-54","55-59",
"60-64","65-69","70-74","75-79",">=80")
ggplot(plotdata, aes(x = Age, y = Estimator, fill = Age)) +
geom_boxplot() +
ggtitle("The result of R-learner(Age)") +
xlab("Age Group") +
ylab("Estimator") +
scale_fill_manual(values = rainbow(length(unique(plotdata$Age))), labels = age_labels) +
theme_bw()
data <- fread(file.path(data_dir, "Diabetes.csv"))
data$scoreCat <- ifelse(data$scoreCat == "> mean score",1,0)
diabetes <- data
model_score <- glm(Diabetes_binary ~ scoreCat, data = diabetes,
family = binomial)
summary(model_score)
Confint(model_score, vcov. = vcovHC(model_score, type = "HC0"))
model_score_adj <- glm(Diabetes_binary ~ scoreCat + Sex + Age + Income,
data = diabetes, family = binomial)
summary(model_score_adj)
Confint(model_score_adj, vcov. = vcovHC(model_score_adj, type = "HC0"))
results <- summary(model_score)$coefficients
rownames(results) <- c("score", "adjusted score")
results <- results[, c("Estimate", "Std. Error", "z value")]
colnames(results) <- c("Estimate", "2.5 %", "97.5 %")
results["score", ] <- c(-0.5980872, -0.620951, -0.5752233)
results["adjusted score", ] <- c(-0.3774651, -0.4016496, -0.3532806)
knitr::kable(results, digits = c(4, 4, 4), align = "c", caption = "Adjustment Results")
results <- summary(model_score)$coefficients
rownames(results) <- c("score", "adjusted score")
results <- results[, c("Estimate", "Std. Error", "z value")]
colnames(results) <- c("Estimate", "2.5 %", "97.5 %")
results["score", ] <- c(exp(-0.5980872), exp(-0.620951), exp(-0.5752233))
results["adjusted score", ] <- c(exp(-0.3774651), exp(-0.4016496), exp(-0.3532806))
knitr::kable(results, digits = c(4, 4, 4), align = "c", caption = "Adjustment Results")
set.seed(1)
data$scoreCat <- ifelse(data$scoreCat == "> mean score",1,0)
rW  = cbind(data$Age,data$Sex,data$Income)
rW = as.matrix(rW)
rA = data$scoreCat
rY = data$Diabetes_binary
rlasso_fit = rlasso(rW, rA, rY,k_folds = 10)
library(knitr)
library(tidyverse)
library(rigr)
library(dplyr)
library(gtsummary)
library(flextable)
library(ggplot2)
library(rlearner)
library(data.table)
library(randomForest)
library(sandwich)
library(car)
theme_set(theme_classic())
data_dir <- "~/Desktop"
data <- fread(file.path(data_dir, "Diabetes.csv"))
balanced_diabetes <- fread(file.path(data_dir,"diabetes_binary_5050split_health_indicators_BRFSS2015.csv"))
set.seed(1)
data$scoreCat <- ifelse(data$scoreCat == "> mean score",1,0)
rW  = cbind(data$Age,data$Sex,data$Income)
rW = as.matrix(rW)
rA = data$scoreCat
rY = data$Diabetes_binary
rlasso_fit = rlasso(rW, rA, rY,k_folds = 10)
rlasso_est = predict(rlasso_fit, rW)
plotdata <- data.frame(Income = data$Income,
Estimator =rlasso_est)
plotdata$Income_Group <- cut(plotdata$Income, breaks=c(0,2, 4,6, 8), labels=c("<15000","[15000,25000)","[25000,50000)", ">=50000"))
plot1 <- ggplot(plotdata, aes(x = Income_Group, y = Estimator, fill = Income_Group)) +
geom_boxplot() +
ggtitle("The result of R-learner(Income)") +
xlab("Income Group") +
ylab("Estimator") +
scale_fill_brewer(palette="Set1") +
theme_bw()
plotdata <- data.frame(Sex = data$Sex,
Estimator =rlasso_est)
plotdata$Gender_Group <- ifelse(plotdata$Sex==0,"Female","Male")
plot2 <- ggplot(plotdata, aes(x = Gender_Group, y = Estimator, fill = Gender_Group)) +
geom_boxplot() +
ggtitle("The result of R-learner(Gender)") +
xlab("Gender Group") +
ylab("Estimator") +
scale_fill_brewer(palette="Set2") +
theme_bw()
plotdata <- data.frame(Age = data$Age,
Estimator =rlasso_est)
plotdata$Age = as.factor(plotdata$Age)
age_labels <- c("18-24","25-29","30-34","35-39","40-44","45-49","51-54","55-59",
"60-64","65-69","70-74","75-79",">=80")
plot3 <- ggplot(plotdata, aes(x = Age, y = Estimator, fill = Age)) +
geom_boxplot() +
ggtitle("The result of R-learner(Age)") +
xlab("Age Group") +
ylab("Estimator") +
scale_fill_manual(values = rainbow(length(unique(plotdata$Age))), labels = age_labels) +
theme_bw()
plot1 + theme(plot.margin = margin(1, 2, 3, 4, "cm"))
set.seed(1)
data$scoreCat <- ifelse(data$scoreCat == "> mean score",1,0)
rW  = cbind(data$Age,data$Sex,data$Income)
rW = as.matrix(rW)
rA = data$scoreCat
rY = data$Diabetes_binary
rlasso_fit = rlasso(rW, rA, rY,k_folds = 10)
library(knitr)
library(tidyverse)
library(rigr)
library(dplyr)
library(gtsummary)
library(flextable)
library(ggplot2)
library(rlearner)
library(data.table)
library(randomForest)
library(sandwich)
library(car)
theme_set(theme_classic())
data_dir <- "~/Desktop"
data <- fread(file.path(data_dir, "Diabetes.csv"))
balanced_diabetes <- fread(file.path(data_dir,"diabetes_binary_5050split_health_indicators_BRFSS2015.csv"))
set.seed(1)
data$scoreCat <- ifelse(data$scoreCat == "> mean score",1,0)
rW  = cbind(data$Age,data$Sex,data$Income)
rW = as.matrix(rW)
rA = data$scoreCat
rY = data$Diabetes_binary
rlasso_fit = rlasso(rW, rA, rY,k_folds = 10)
rlasso_est = predict(rlasso_fit, rW)
plotdata <- data.frame(Income = data$Income,
Estimator =rlasso_est)
plotdata$Income_Group <- cut(plotdata$Income, breaks=c(0,2, 4,6, 8), labels=c("<15000","[15000,25000)","[25000,50000)", ">=50000"))
plot1 <- ggplot(plotdata, aes(x = Income_Group, y = Estimator, fill = Income_Group)) +
geom_boxplot() +
ggtitle("The result of R-learner(Income)") +
xlab("Income Group") +
ylab("Estimator") +
scale_fill_brewer(palette="Set1") +
theme_bw()
plotdata <- data.frame(Sex = data$Sex,
Estimator =rlasso_est)
plotdata$Gender_Group <- ifelse(plotdata$Sex==0,"Female","Male")
plot2 <- ggplot(plotdata, aes(x = Gender_Group, y = Estimator, fill = Gender_Group)) +
geom_boxplot() +
ggtitle("The result of R-learner(Gender)") +
xlab("Gender Group") +
ylab("Estimator") +
scale_fill_brewer(palette="Set2") +
theme_bw()
plotdata <- data.frame(Age = data$Age,
Estimator =rlasso_est)
plotdata$Age = as.factor(plotdata$Age)
age_labels <- c("18-24","25-29","30-34","35-39","40-44","45-49","51-54","55-59",
"60-64","65-69","70-74","75-79",">=80")
plot3 <- ggplot(plotdata, aes(x = Age, y = Estimator, fill = Age)) +
geom_boxplot() +
ggtitle("The result of R-learner(Age)") +
xlab("Age Group") +
ylab("Estimator") +
scale_fill_manual(values = rainbow(length(unique(plotdata$Age))), labels = age_labels) +
theme_bw() +
theme(plot.margin = margin(1, 2, 3, 4, "cm"))
# Create a new png device with specified width and height (in pixels)
png(filename = "/Users/philjiang/Desktop/dag.png", width = 700, height = 500)
# Don't forget to close the device when you're done!
dev.off()
# Create a new png device with specified width and height (in pixels)
png(filename = "/Users/philjiang/Desktop/dag.png", width = 700, height = 500)
# Create a new png device with specified width and height (in pixels)
x <- png(filename = "/Users/philjiang/Desktop/dag.png", width = 700, height = 500)
print(x)
![Optional caption](/Users/philjiang/Desktop/dag.png)
readPNG("/Users/philjiang/Desktop/dag.png", native = FALSE, info = FALSE)
readPNG("/Users/philjiang/Desktop/dag.png", native = FALSE, info = FALSE)
